service: serverless-spam-detection  ##name of the service

configValidationMode: error

plugins:
  - serverless-python-requirements
provider:
  name: aws
  runtime: python3.7 ##python version
  region: us-east-1 ##region of s3 bucket with model 
  lambdaHashingVersion: 20201221

  deploymentBucket:
    name: serverless-spam-detection ## name of s3 bucket with model 

  iamRoleStatements: ## allow role to read from s3 
    - Effect: Allow
      Action: 
        - s3:GetObject
      Resource:
        - "arn:aws:s3:::serverless-spam-detection/*"  ## name of s3 bucket with model 
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:us-east-1:086948990359:table/spam-detection-users" 


custom:
  pythonRequirements:
    pythonBin: python3
    slim: true
    layer: true ## add requirements as layer
    useDownloadCache: true 
    useStaticCache: true
    noDeploy:
      - pytest

functions:
  classify_message_lambda:
    name:  classify_message_lambda ## aws lambda function
    description: serverless spam detection lambda
    handler: main.lambda_handler ## file with lambda_handler function
    layers:
      - Ref: PythonRequirementsLambdaLayer ## add requirements as layer
      - arn:aws:lambda:us-east-1:446751924810:layer:python-3-7-scikit-learn-0-22-0:3 ## add sklearn as layer
    events:  
      - http: 
          path:  /mlpclassifiers
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:086948990359:function:spam-authorizer-lambda  ## aws lambda authorizer function
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
            type: token
      - http: 
          path:  /kneighbors
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:086948990359:function:spam-authorizer-lambda  ## aws lambda authorizer function
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
            type: token
      - http: 
          path:  /decisiontrees
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:086948990359:function:spam-authorizer-lambda  ## aws lambda authorizer function
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
            type: token
      - http: 
          path:  /randomforests
          method: GET
          cors: true
          authorizer:
            arn: arn:aws:lambda:us-east-1:086948990359:function:spam-authorizer-lambda  ## aws lambda authorizer function
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: .*
            type: token
  login_user_lambda:
    name:  login_user_lambda ## aws lambda function
    description: serverless spam detection login user lambda function
    handler: login.login_handler ## file with lambda_handler function
    events:  
      - http: 
          path:  /login
          method: GET
          cors: true
          
     




